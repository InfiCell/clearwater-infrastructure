#!/bin/bash

# @file generic_create_diameterconf
#
# Project Clearwater - IMS in the Cloud
# Copyright (C) 2014 Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

# This file creates a freeDiameter config file, and appropriate
# TLS keys, for either Ralf, Homestead or Cedar.

usage="Usage: generic_create_diameterconf [homestead|ralf|cedar] DIAMETER_IDENTITY DIAMETER_REALM LISTEN_PORT SECURE_LISTEN_PORT INCOMING_CONNECTIONS CHECK_DESTINATION_HOST"

name=$1
identity=$2
realm=$3
port=$4
sec_port=$5
acl_required=$6
check_dh=$7

if [[ $# != 7 ]]
then
    # Usage message to stderr
    echo $usage >&2
    exit 1
fi

key_dir=/var/lib/$name
cfg_dir=/var/lib/$name
fd_dir=/usr/share/clearwater/$name/lib/freeDiameter/

if /usr/share/clearwater/bin/is-address-ipv6 $identity
then
  identity=$(/usr/share/clearwater/bin/ipv6-to-hostname $identity)
fi

if /usr/share/clearwater/bin/is-address-ipv6 $realm
then
  realm=$(/usr/share/clearwater/bin/ipv6-to-hostname $realm)
fi

if [ -f $key_dir/privkey.pem ]
then
    priv_modulus=$(openssl rsa -in $key_dir/privkey.pem -modulus -noout)
fi

if [ -f $key_dir/cert.pem ]
then
    pub_modulus=$(openssl x509 -in $key_dir/cert.pem -modulus -noout)
    cert_current_name=$(certtool --certificate-info --infile $key_dir/cert.pem | egrep -e 'Subject: CN=' | sed 's/.*Subject: CN=//g')
    cert_issuer=$(certtool --certificate-info --infile $key_dir/cert.pem | egrep -e 'Issuer: CN=' | sed 's/.*Issuer: CN=//g')
fi

if [ -f $key_dir/ca.pem ]
then
    ca_name=$(certtool --certificate-info --infile $key_dir/ca.pem | egrep -e 'Subject: CN=' | sed 's/.*Subject: CN=//g')
fi

if [ "$cert_current_name" != "$identity" ] ||
   [ "$priv_modulus" != "$pub_modulus" ] ||
   [ "$cert_issuer" != "$ca_name" ]
then
    # The current certificate does not have the required common name,
    # or does not match the private key, or does not match the CA.  Remove them so that they are regenerated below.
    rm -f $key_dir/cert.pem $key_dir/privkey.pem $key_dir/ca.pem
fi

# If any of the certificate files are missing, create new self-signed ones.
if [ ! -f $key_dir/cert.pem ] ||
   [ ! -f $key_dir/privkey.pem ] ||
   [ ! -f $key_dir/ca.pem ]
then
  rm -f $key_dir/cert.pem $key_dir/privkey.pem $key_dir/ca.pem

  # Build up the configuration file for GnuTLS
  cat > /tmp/cert.cfg.$$ <<EOF
cn = "$identity"
expiration_days = 3650
EOF

  # Create the certificates.
  sudo certtool --generate-privkey --bits 1024 --template /tmp/cert.cfg.$$ --outfile $key_dir/privkey.pem
  sudo certtool --generate-self-signed --bits 1024 --template /tmp/cert.cfg.$$ --load-privkey $key_dir/privkey.pem --outfile $key_dir/cert.pem

  # Fix up the certificates in the directory.  The private key is created as readable
  # by root only.  Fix it so that the $name user can read it as well.
  chmod 644 $key_dir/privkey.pem
  cp $key_dir/cert.pem $key_dir/ca.pem
  rm /tmp/cert.cfg.$$
fi

# By default assume incoming connections from peers are not allowed, so comment out the
# acl_wl.fdx Load Extension line. If incoming connections are allowed, uncomment it.
acl_commenter="#";
if [[  $acl_required == "true" ]]
then
  acl_commenter=""
fi

# By default assume that the Destination-Host AVP should be checked on incoming requests, 
# so comment out the rt_change_dh.fdx Load Extension line. If ignoring the Destination-Host
# is allowed, uncomment it.
dh_commenter="#";
if [[  $check_dh == "false" ]]
then
  dh_commenter=""
fi

# Set up the configuration for $name with the right IP addresses and ports
cat > $cfg_dir/$name.conf <<EOF
# -------- Local ---------

Identity = "$identity";
Realm = "$realm";

Port = $port;
SecPort = $sec_port;

# TLS configuration
TLS_Cred = "$key_dir/cert.pem", "$key_dir/privkey.pem";
TLS_CA = "$key_dir/ca.pem";

# Limit the number of SCTP streams
SCTP_streams = 3;


# -------- Extensions ---------

# Uncomment (and create rtd.conf) to specify routing table for this peer.
#LoadExtension = "$fd_dir/rt_default.fdx" : "$cfg_dir/rtd.conf";

# Uncomment (and create acl.conf) to allow incoming connections from other peers.
$acl_commenter LoadExtension = "$fd_dir/acl_wl.fdx" : "$cfg_dir/acl.conf";

# Uncomment to display periodic state information
LoadExtension = "$fd_dir/dbg_monitor.fdx";

# Load the SIP and 3GPP dictionary objects
LoadExtension = "$fd_dir/dict_nasreq.fdx";
LoadExtension = "$fd_dir/dict_sip.fdx";
LoadExtension = "$fd_dir/dict_dcca.fdx";
LoadExtension = "$fd_dir/dict_dcca_3gpp.fdx";

# Uncomment to allow ignoring the Destination-Host AVP on incoming requests
$dh_commenter LoadExtension = "$fd_dir/rt_change_dh.fdx";

# If we receive an AVP that is marked as mandatory from one of these vendors,
# we ignore the mandatory flag.
UntrustedAVPVendors = 19444;

EOF
