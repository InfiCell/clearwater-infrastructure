#!/bin/bash

# @file gather_diags_and_report_location
#
# Copyright (C) Metaswitch Networks 2017
# If license terms are provided to you in a COPYING file in the root directory
# of the source code repository by which you are accessing this code, then
# the license outlined in that COPYING file applies to your use.
# Otherwise no rights are granted except for those provided to you by
# Metaswitch Networks in a separate written agreement.

DIAGS_LOCATION=/var/clearwater-diags-monitor/dumps/

# We always want to create a dump in the clearwater user's directory,
# irrespective of whether or not the command was run with sudo.
if [ -n "$SUDO_USER" ]
then
  # Evaluate the SUDO_USER's home directory and assign to CLEARWATER_USER_HOME.
  eval CLEARWATER_USER_HOME="~$SUDO_USER"
elif [ -n "$HOME" ]
then
  CLEARWATER_USER_HOME=$HOME
elif [ -d /home/clearwater ]
then
  CLEARWATER_USER_HOME=/home/clearwater
elif [ -d /home/centos ]
then
  CLEARWATER_USER_HOME=/home/centos
else
  CLEARWATER_USER_HOME=/home/ubuntu
fi

DIAGS_END_LOCATION=${CLEARWATER_USER_HOME}/ftp/dumps/

# Check for the force or force-confirmed options. These are used to run diags
# gathering even if we have low idle CPU, or to do so and skip any confirmation.
force=false
confirmed=false
if [ "$1" == "--force" ]
then
  force=true
elif [ "$1" == "--force-confirmed" ]
then
  force=true
  confirmed=true
fi

no_report=false
# Also check to see if this is a call through from gather_diags
if [[ "$1" == "--no-report" || "$2" == "--no-report" ]]
then
  no_report=true
fi

# If bad arguments passed in, give usage details. We do not detail the --force
# or --force-confirmed options here. --force is mentioned later, and --force-confirmed
# is intended solely for use by automated scripts
if [[ $# -ne 0 && $force != true && $no_report != true ]]
then
  echo "Usage: gather_diags_and_report_location"
  echo "This script triggers diagnostics collection, and reports where the diagnostics are collected"
  exit 1
fi

# Pull in utility functions, and proceed with checks, as necessary
. /usr/share/clearwater/bin/gather_diags_utils

verify_process_running

# CPU utilisation checks/waits
echo "Checking available CPU..."
if [ $(get_idle_cpu) -gt $MIN_IDLE_CPU_FOR_GATHER ]
then
  # We have enough idle CPU so proceed without needing further confirmation
  confirmed=true
elif [ $force != true ]
then
  check_and_wait_cpu_idle
  confirmed=true
fi

# If we haven't passed CPU checks, or are not being run with --force-confirmed
# we want a user to confirm they want to run a CPU heavy operation
if [ $confirmed != true ]
then
  confirm_user_action
fi

# Store the current time
current_time=$(date --utc "+%Y%m%d%H%M%S")

# Write a file to trigger a diagnostic dump.
echo "Collecting diagnostics from the system."
echo "This operation can take a few minutes to complete."
echo "Manually triggered by /usr/share/clearwater/bin/gather_diags" > /var/clearwater-diags-monitor/tmp/core.gather_diags.$(date +%s)

if [ $no_report != true ]
then
  # Now wait for the diagnostics collection to complete
  latest_diags_time=0
  while [ $latest_diags_time -lt $current_time ]
  do
    echo -n "."
    sleep 2

    latest_diags_file=$(ls -t $DIAGS_LOCATION | grep -v temp | grep -e tar.gz | tr '\n' ' ' | cut -d ' ' -f 1)
    if [ ! -z $latest_diags_file ]
    then
      # Format of the dumps is /var/clearwater-diags-monitor/dumps/<datestamp>.<hostname>.<cause>.tar.gz
      latest_diags_time=$(echo $latest_diags_file | cut -d '.' -f 1 | cut -d 'Z' -f 1)
    fi
  done

  mkdir -p $DIAGS_END_LOCATION

  cp $DIAGS_LOCATION$latest_diags_file $DIAGS_END_LOCATION

  echo -e "\nDiagnostics collected. These are available at $DIAGS_END_LOCATION$latest_diags_file"
fi
